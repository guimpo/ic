import math
import pandas as pd
import numpy as np
from logger import CustomLogger
from funcoes import func_logistica, pos_proc
from timer import timerfunc
from plotter import my_plot
from decimal import *

getcontext().prec = 6

np.set_printoptions(suppress=True)
ROUND = 8
MAX_EPOCAS = 10000
PRECISAO = 0.000001
N = 0.01
eqm_anterior = 0.

# df = pd.read_csv('data/exe_06_treinamento.csv', sep=',', header=None)
# X = df.iloc[0:129, [0, 1, 2, 3]].values.astype(np.longdouble)
# X = np.insert(X, 0, -1, axis=1)
# Y = df.iloc[0:129, [4, 5, 6]].values

@timerfunc
def treino(X, Y, max_epoca=3000, seed=0):
    np.random.seed(seed)
    w1 = np.random.uniform(0, 1, (15, 5)).astype(np.longdouble)
    w2 = np.random.uniform(0, 1, (3, 15)).astype(np.longdouble)
    w1_inicial = np.copy(w1)
    w2_inicial = np.copy(w2)
    w1_final = None
    w2_final = None
    eqm_hist = []
    eqm_atual = 0.
    eqm_anterior = 0.
    epoca = 0
    while epoca < MAX_EPOCAS:
        eqm_anterior = eqm_atual

        i_1 = np.ones(shape=(1, 15))
        y_1 = np.ones(shape=(1, 15))
        i_2 = np.ones(shape=(1, 3))
        y_2 = np.ones(shape=(1, 3))

        for k, amostras in enumerate(X):
            for j in range(15):
                i_1[0][j] = np.dot(amostras, w1[j])
                y_1[0][j] = func_logistica(i_1[0][j])

            for j in range(3):
                i_2[0][j] = np.dot(y_1, w2[j])
                y_2[0][j] = func_logistica(i_2[0][j])

            eqm_atual += np.sum(0.5 * (Y[k] - y_2) ** 2) / 3.
            delta_2 = np.around(((Y[k] - y_2) * (y_2 * (1 - y_2))), ROUND)

            for j in range(3):
                w2[j] = np.around((w2[j] + N * delta_2[0][j] * y_1), ROUND)

            delta_1 = np.ones(shape=(3, 15))
            for j1 in range(15):
                for j2 in range(3):
                    delta_1[j2] = delta_2[0][j2] * w2[j2] * (y_1 * (1 - y_1))

            delta_1 = (delta_1[0] + delta_1[1] + delta_1[2]) / 3.
            for n in range(15):
                w1[n] = np.around((w1[n] + N * delta_1[n] * amostras), ROUND)

        eqm_atual = eqm_atual / len(X)
        eqm_hist.append(eqm_atual)
        epoca += 1

        if abs(Decimal(round(eqm_atual, 6)) - Decimal(round(eqm_anterior, 6))) <= Decimal(PRECISAO):
            print("Precisão atingida!!!")
            break
    w1_final = w1
    w2_final = w2
    return w1_inicial, w2_inicial, w1_final, w2_final, eqm_hist, epoca

def teste(X, Y, w1, w2):
    i_1 = np.ones(shape=(1, 15))
    y_1 = np.ones(shape=(1, 15))
    i_2 = np.ones(shape=(1, 3))
    y_2 = np.ones(shape=(1, 3))
    y_2_pos = np.ones(shape=(1, 3))
    resultados_pre = []
    resultados_pos = []
    acertos = np.ones(shape=(1, 18))
    for k, amostras in enumerate(X):
        for j in range(15):
            i_1[0][j] = np.dot(amostras, w1[j])
            y_1[0][j] = func_logistica(i_1[0][j])

        for j in range(3):
            i_2[0][j] = np.dot(y_1, w2[j])
            y_2[0][j] = func_logistica(i_2[0][j])
            y_2_pos[0][j] = pos_proc(y_2[0][j])
        
        resultados_pre.append(np.copy(y_2))
        resultados_pos.append(np.copy(y_2_pos))
        r = Y[k] == y_2_pos
        for _ in range(3):
            if r[0][_] == False:
                acertos[0][k] = 0
                break
    return resultados_pos, resultados_pre, acertos

def execute_n_vezes(n, seed=0):
    for i in range(n):
        seed += 1
        print("\n")
        print('---- Experimento ---- {}'.format(i + 1))
        print('Seed: {}'.format(seed))
        w1_inicial, w2_inicial, w1_final, w2_final, eqm_hist, epoca = treino(
            X, Y, MAX_EPOCAS, seed=seed)
        print('Pesos w1 Inicial: {}'.format(w1_inicial.tolist()))
        print('Pesos w2 Inicial: {}'.format(w2_inicial.tolist()))
        print('Pesos w1 final: {}'.format(w1_final.tolist()))
        print('Pesos w2 final: {}'.format(w2_final.tolist()))
        print('Épocas: {}'.format(epoca))
        print('EQM Histórico: {}'.format(eqm_hist))
        my_plot(i, eqm_hist)

if __name__ == "__main__":
    log = CustomLogger()
    # execute_n_vezes(5, 74)
    df = pd.read_csv('data/exe06/entrega/exe_06_teste.csv', sep=',', header=None)
    X = df.iloc[0:18, [0, 1, 2, 3]].values.astype(np.longdouble)
    X = np.insert(X, 0, -1, axis=1)
    Y = df.iloc[0:18, [4, 5, 6]].values
    
    # Treino 01
    # w1 = np.array([[3.53454065, 1.76249496, 3.20923214, 3.00880783, 2.42772745], [1.40719458, 0.59873049, 1.31867645, 0.94601925, 1.39158524], [2.23564553, 1.63145444, 2.34354965, 1.95298674, 1.32708723], [-1.78588269, -1.27309477, -1.91358453, -1.82238208, -0.93123968], [-0.31717019, -0.57876851, -0.75724609, -0.75017619, -0.02721655], [7.15092339, 2.38921667, 2.96842499, 3.32647112, 2.58340804], [-1.42233669, 0.89546835, 0.99174163, 0.75989236, 0.10481884], [-0.86413162, 0.43700378, 1.19562429, 1.22698982, 0.95098634], [-2.0634877, 0.98730622, 1.03072712, 0.48839559, 1.07014511], [0.33900082, 0.29039263, -0.03597207, 0.78985982, 0.35898445], [-1.26012373, -0.16370186, 0.59983209, 0.09488923, 0.14432229], [5.08762525, 1.35785355, 1.63624833, 2.40948105, 2.57864065], [3.68179266, 2.34268125, 2.92322837, 2.82467676, 2.70958284], [1.82920352, 0.78406264, 0.61278645, 0.92916116, 0.8044681], [0.51287364, 0.36886272, 0.34852168, 0.28816049, 0.70175566]])
    # w2 = np.array([[-4.48590694, -2.21319082, -3.5921338, 4.33310875, 2.64315886, -4.32720716, 1.67555593, 1.05827006, 3.12104014, 0.57014398, 1.46296522, -3.2236896, -4.10851861, -1.40784916, 0.36052166], [6.4704186, 0.30491647, 2.85566774, -3.79848407, -1.70020304, -9.88007659, -0.91087732, -0.07932015, -1.81143017, -2.17446513, -1.93188502, -6.19344997, 7.08336202, -1.61214888, -1.19444722], [2.09719446, 1.15232781, 2.02775092, -4.55458771, -2.40547066, 7.35305352, -3.41919652, -2.58154653, -4.06086904, 0.10933446, -2.92579472, 5.65071186, 1.58149741, 1.79572352, 0.29329345]])

    # Treino 02
    # w1 = np.array([[-0.57700469, 0.53578482, 0.00521442, -0.13741515, -0.10342235], [6.58672052, 2.22942323, 2.49220295, 3.02820889, 2.64444016], [1.39568425, 0.18144075, 0.72498461, 0.72052863, 0.97157463], [1.21407262, 0.12946687, 0.89795737, 0.5965454, 0.96836449], [1.5300079, 0.93166525, 1.28673782, 1.05641086, 1.2902055], [4.67802694, 2.82962211, 3.8267956, 3.48483267, 2.81071674], [0.32162051, 0.80633194, -0.04976418, 0.16591231, 0.72046032], [3.44044666, 2.48311526, 3.12051343, 2.43187161, 2.59043594], [-1.73886813, 0.13372619, -0.37411559, 0.15092631, 0.22274873], [1.06688409, 0.6830889, 0.36218723, 0.61369495, 0.49270089], [-1.76375151, -0.6148287, -1.1107802, -1.67392825, -0.99320478], [0.743824, 1.46139966, 1.75663804, 1.46204095, 0.65764661], [3.3876408, 1.26683206, 1.31069346, 1.39191273, 1.34241779], [2.52636125, 0.61496014, 1.22147168, 1.07756253, 1.170899], [-2.85605835, -0.89480339, -1.06164422, -1.93094743, -1.27314661]])
    # w2 = np.array([[1.40022422, -4.26367403, -1.03509326, -1.05352602, -2.0792055, -5.44769339, 0.0941973, -2.05296104, 2.55256164, -0.09739021, 4.59888544, -1.44591711, -2.47176677, -2.13965926, 4.96318224], [-2.23060765, -9.29352771, -2.68309095, -1.54549447, 0.32920228, 8.97652784, -2.46353713, 7.48669685, -3.23577048, -2.30531483, -1.24496962, 1.69546971, -3.97184337, -3.09988709, 0.181044], [-1.80576003, 6.36317112, 0.72020416, 0.86970356, 1.836939, 3.25346868, -0.16322951, -2.06032522, -3.41757174, 0.65401622, -5.25050356, -0.99487652, 3.51637612, 2.2421821, -7.25691414]])
    
    # Treino 03
    # w1 = np.array([[2.55652612, 1.09331956, 1.35655432, 0.92811251, 0.64882384], [0.92545434, 0.35277406, 0.70569667, 0.29360928, 0.55741987], [1.15934781, 1.62110916, 2.08875053, 1.64322602, 1.16839696], [-1.03907908, 0.32945412, 0.18044561, -0.54875297, 0.34872321], [-3.48331514, -2.05768807, -3.13521824, -2.88772987, -2.32547417], [1.05860453, 0.24836163, 0.60872551, 0.55741979, 0.35874103], [-0.86241547, -0.54576985, -1.09877234, -0.64752368, -0.76335982], [-0.56356592, -0.06785937, -0.72699501, -0.75567696, -0.31414012], [4.11123511, 2.7977883, 3.43883751, 2.86544418, 2.9274424], [0.50996662, -0.07701603, 0.18862447, -0.35684888, 0.03276962], [5.72885201, 1.62288118, 2.09679311, 2.86141324, 2.38630199], [-1.72423074, -0.38584048, -1.0940729, -1.65197819, -0.68185917], [2.10167231, 0.70764191, 0.45877401, 0.79805234, 1.37444089], [4.7084598, 1.8454027, 1.5388026, 2.04123461, 1.90699819], [3.62721288, 1.1221407, 1.383926, 1.30676099, 1.77995315]])
    # w2 = np.array([[-2.58592972, -0.87367689, -1.76237824, 0.39444966, 5.68266837, -0.46711723, 2.80835741, 2.0747116, -3.52525431, 0.03754065, -4.38761435, 3.70497462, -1.17603688, -4.23353413, -2.46956495], [-2.52031835, -0.85624485, 4.06898583, -1.20123223, -7.57308065, -1.11287831, -0.54626764, -0.44153708, 9.55027593, -0.04614293, -7.44613233, -0.28184715, -2.63250605, -5.15404399, -4.46627789], [2.13783681, 0.07708287, -1.45842371, -3.31975479, -5.60829271, 0.29872513, -3.69475072, -2.80116738, 0.08081354, -1.63871262, 5.53159269, -5.25270474, 1.7584749, 5.11280675, 3.20479253]])
    
    # Treino 04
    # w1 = np.array([[-2.05654347, 1.15837207, 1.21880491, 1.24207111, 1.31077172], [0.00480196, 0.71689024, -0.06067407, -0.12077732, 0.44963607], [4.18142468, 1.51827813, 1.70816766, 1.5463487, 1.70056227], [2.61155964, 0.44881, 1.23726929, 1.43668672, 1.04171581], [-1.25262252, 0.20453491, -0.54685535, -1.00270147, -0.55283417], [0.84493895, 0.86413512, -0.12897882, 0.25761274, 0.9243996], [2.97481486, 0.96638932, 1.57168348, 1.24140401, 0.846923], [-1.52758867, -0.86532458, -0.51038192, -0.87533093, -1.08131858], [-1.92312862, 0.14958567, 0.11054048, 0.0355967, 0.53890235], [3.1000309, 0.74591023, 0.9988675, 1.71190486, 1.47266933], [6.38202479, 2.01243269, 2.36241373, 3.14301487, 2.48879141], [1.45584855, 0.79043366, 1.47255577, 1.7660943, 1.26049582], [1.56146143, 1.10982418, 1.33704609, 1.24300128, 0.6526864], [4.03815801, 2.65374085, 3.34331313, 3.05589043, 2.53413017], [3.99284978, 2.7168464, 3.70093098, 2.80816695, 2.27722211]])
    # w2 = np.array([[3.45692492, 0.88369103, -3.42514715, -2.45099691, 2.92643117, 0.10162961, -2.76913796, 3.76975074, 2.48113925, -3.28744908, -4.07387915, -2.22623077, -2.32810259, -3.94778212, -3.72556013], [-1.29899062, -2.21732678, -4.65714606, -2.30846243, -1.76920288, -2.0300508, -2.95548908, -1.60692354, -2.27525568, -2.561008, -8.71103592, 1.42926602, 0.31909902, 8.28383325, 8.36748213], [-5.30756794, -0.77910782, 4.28402521, 2.83022697, -3.95047913, 0.6429341, 2.93047894, -4.66825794, -3.96046385, 3.45899524, 6.21832831, 1.47426742, 1.51782695, 0.93541822, 0.20038448]])
    
    # Treino 05
    w1 = np.array([[1.59803963, 0.65255719, 0.89355552, 0.59072309, 1.08355342], [-0.27693962, 0.47214192, 0.51969243, -0.42270985, -0.02682468], [3.70088267, 2.55448246, 3.23642276, 2.7271026, 2.26626304], [-1.36857107, -1.14185731, -1.73288478, -1.44836803, -0.9980677], [-0.73700436, -0.08685243, -0.01038855, -0.7386404, 0.48109196], [7.45677645, 2.31429824, 2.74664776, 3.6526541, 3.11501674], [-1.85116939, 0.66492799, 0.84496938, 0.3820362, 0.77402124], [-1.28051131, 0.81194198, 0.38422278, 0.47420631, 0.20881272], [0.34483212, 0.00578852, -0.30671733, -0.38901796, 0.08769992], [2.14787527, 1.10577167, 0.8719912, 0.69105843, 1.10692564], [-1.03886786, -0.61092812, -1.25854043, -0.90919126, -0.80579777], [4.11966392, 1.34377661, 1.52198057, 2.129979, 1.44663116], [3.86689929, 2.08004111, 3.42855264, 3.05251886, 2.73970907], [-0.73562202, 0.66534289, 0.672799, 0.44628145, -0.08906627], [2.00279801, 0.5092163, 1.16610604, 0.52274286, 1.25824543]])
    w2 = np.array([[-2.01010183, 0.61421544, -4.83831003, 4.01691481, 1.81022857, -4.92652439, 1.8134237, 1.2346455, 1.6421817, -2.36579455, 3.70079123, -3.80896624, -3.73651861, 0.61918255, -1.76248963], [-0.96204979, -1.25026683, 6.91078418, -3.38277349, -1.37826292, -10.34862412, -1.34563812, -1.09438035, -0.70141185, -1.31976363, -1.49523303, -4.09544123, 8.18619791, -0.57855414, -1.62512681], [1.29964851, -1.66633218, 2.57186206, -3.6033952, -2.27679253, 7.9223751, -4.10665584, -2.77079955, -1.1179253, 2.07802881, -3.60197462, 4.64059732, 1.22082091, -2.13256875, 2.02064485]])
    
    resultados_pos, resultados_pre, acertos = teste(X, Y, w1, w2)
    print('Resultado pós: {}'.format(resultados_pos))
    print('Resultado pré: {}'.format(resultados_pre))
    print('Resultado acertos: {}'.format(acertos))
    log.finish()
